"Модуль управления бортовыми скриптами (циклограммами)"
namespace ru.mipt.acsl.scripting

import ru.mipt.acsl.foundation.{s, b8, u8, guid, error_code}

'Идентификатор скрипта'
type script_id guid

'Информация о скрипте'
type script_info struct
(
  script_id scriptId,
  'Данные скрипта'
  [u8]      scriptData,
  'Байткод скрипта'
  [u8]      scriptCode,
)

'Дата и время'
type date_time ber
'Период времени'
type period    ber

'Запланированный запуск скрипта'
type script_run_timing struct
(
  'Идентификатор запланированного запуска'
  guid        ^id,
  'Запуск запланирован'
  b8          isActive,
  script_id   scriptId,
  'Время запуска'
  date_time   runOn,
  'Периодический скрипт'
  b8          isRepeated,
  'Период повторения'
  period /s/  repeatPeriod,
  'Повторение ограничено'
  b8          isRepeatingLimitedByDate,
  'Дата и время окончания повторения запусков скрипта'
  date_time   repeatUntil,
)

type result final enum extends error_code (INVALID_ARGUMENT = 1, INVALID_STATE = 2)

'Управление бортовыми скриптами (циклограммами)'
component Scripting
{
  parameters
  (
    'Идентификаторы бортовых скриптов'
    [guid]              scriptsIds,
    'Бортовые скрипты'
    [script_info]       scripts,
    'Данные планировщика запуска скриптов'
    [script_run_timing] scriptsRunTimings,
  )

  'Загрузить скрипт'
  command uploadScript
  (
    script_info script,
  ) -> result

  'Удалить скрипт'
  command deleteScript(script_id scriptId) -> result

  'Запустить скрипт незамедлительно'
  command runScriptNow(script_id scriptId) -> result

  'Запланировать запуск скрипта'
  command scheduleScriptRun(script_run_timing scriptRunTiming) -> result

  'Активировать запланированный запуск скрипта'
  command enableScriptRunTiming(guid scriptRunTimingId) -> result

  'Деактивировать запланированный запуск скрипта'
  command disableScriptRunTiming(guid scriptRunTimingId) -> result

  'Перечень загруженных скриптов'
  status availableScriptsIds
  (
    scriptsIds,
  )

  'Данные планировщика запуска скриптов'
  status scriptsRunTimings
  (
    scriptsRunTimings,
  )
}