namespace ru.mipt.acsl.mcc

import ru.mipt.acsl.foundation.*

'Управление аппаратом'
component Device
{
  parameters
  (
    'Уровень заряда батареи'
    u8  /per/ batteryLevel,
    'Уровень радио-сигнала'
    u8  /per/ signalLevel,
    'CRC дерева конфигурации'
    u16 crc,
    'Вид аппарата'
    u8 kind,
  )

  message all:0
  status
  (
    batteryLevel,
    signalLevel,
    crc,
    kind,
  )
}

component Mode info 'Режимы'
{
  struct info 'Режимы'
  (
    u8 name info 'Текущий режим'
  )

  message all:0 info 'Все параметры'
  status
  (
    name,
  )
}

component Navigation with Motion, Mode, DogPoint, Route, Routes info 'Текущее состояние полёта'
{
  command start:0          info 'Включить'()
  command startEngine:1    info 'Включить двигатель'()
  command takeOff:2        info 'Взлететь'()
  command freeFlying:3     info 'Перейти в режим свободного полета'()
  command flyRoute:4       info 'Лететь по маршруту'()
  command wait:5           info 'Ждать'()
  command return:6         info 'Возвратиться'()
  command land:7           info 'Приземлиться'()
  command stopEngine:8     info 'Выключить двигатель'()
  command stop:9           info 'Выключить'()
  command cancelLanding:10 info 'Отменить посадку'()
}

type route_point struct(
  f32 /grad/ latitude  info 'Широта',
  f32 /grad/ longitude info 'Долгота',
  f32 /m/    altitude  info 'Высота',
  f32 /mps/  speed     info 'Скорость',
  u32        flags     info 'Флаги'
)

type route_points [route_point, 0..64]

type route struct(
  u16          name   info 'Имя маршрута',
  b8           isRing info 'Круговой ли маршрут',
  route_points points info 'Точки маршрута'
)

type routes [route, 0..10]

type routes_info struct(
  u16              nextPoint       info 'Следующая точка активного маршрута',
  routes           routes          info 'Маршруты',
  route            activeRoute     info 'Активный маршрут'
)

component Route info 'Управление маршрутом полёта'
{
  routes_info

  command clearRoute:0 info "Очистить маршрут"()

  command beginRoute:1 info 'Начать формирование маршрута'(
    u16        name           info "Номер маршрута",
    u8         waypointsCount info "Количество путевых точек",
    b8         isRing         info "Кольцевой маршрут"
  )

  command setRoutePoint:2 info 'Задать путевую точку'(
    u16       number    info "Номер путевой точки (начиная с нуля)",
    f32 /m/   latitude  info "Широта",
    f32 /m/   longitude info 'Долгота',
    f32 /m/   altitude  info 'Высота',
    f32 /mps/ speed     info 'Скорость',
    u32       flags     info 'Флаги',
  )

  command endRoute:3 info 'Закончить формирование маршрута'()

  command setCurrentRoute:4
  (
    u16 kind info 'Изменить маршрут полёта'
  )

  command setActivePoint:5
  (
    u16 index info 'Индекс точки, начиная с нуля'
  )

  message all:0
  status
  (
    nextPoint,
    routes,
    activeRoute,
  )
}

component Routes info 'Компонент управления маршрутами'
{
  routes_info

  command deleteRoute:0 info 'Удалить маршрут по имени'(
    u16 name info 'Имя'
  )

  command appendRoute:1 info 'Добавить маршрут в конец массива'(
    route route info 'Данные маршрута'
  )

  command updateRoute:2 info 'Обновить маршрут по имени'
  (
    u16   name  info 'Имя',
    route route info 'Данные маршрута'
  )

  message all:0
  status
  (
    nextPoint,
    routes,
    activeRoute,
  )
}

component Motion info 'Характеристики движения'
{
  struct
  (
    f64 /grad/ latitude  info 'Широта',
    f64 /grad/ longitude info 'Долгота',
    f64 /m/    altitude  info 'Высота',
    f64 /m/    accuracy  info 'Точность определения положения',
    f64 /mps/  speed     info 'Скорость',
    f64 /grad/ pitch     info 'Тангаж',
    f64 /grad/ heading   info 'Рыскание',
    f64 /grad/ roll      info 'Крен',
    u8  /per/  throttle  info 'Газ'
  )

  message all:0
  status
  (
    latitude,
    longitude,
    altitude,
    accuracy,
    speed,
    pitch,
    heading,
    roll,
    throttle,
  )
}

component DogPoint info 'Поводковая точка'
{
  struct info 'Поводковая точка'
  (
    f64 /grad/ latitude  info 'Широта',
    f64 /grad/ longitude info 'Долгота',
    f64 /m/    altitude  info 'Высота'
  )

  message all:0
  status
  (
    latitude,
    longitude,
    altitude,
  )
}

component FlyingDevice with Navigation info 'Летающий аппарат'
{

}