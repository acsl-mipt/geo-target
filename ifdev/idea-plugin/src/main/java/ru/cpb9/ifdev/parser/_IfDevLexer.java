/* The following code was generated by JFlex 1.4.3 on 8/1/15 11:29 PM */

package ru.cpb9.ifdev.parser;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static ru.cpb9.ifdev.parser.psi.IfDevTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/1/15 11:29 PM from the specification file
 * <tt>/home/metadeus/projects/CPB9/geo-target/ifdev/idea-plugin/src/main/java/ru/cpb9/ifdev/parser/_IfDevLexer.flex</tt>
 */
public class _IfDevLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\12"+
    "\1\7\3\0\1\14\1\31\1\32\1\11\1\52\1\35\1\53\1\50"+
    "\1\10\12\6\1\54\2\0\1\36\3\0\32\5\1\33\1\13\1\34"+
    "\1\4\1\51\1\0\1\16\1\46\1\23\1\26\1\20\1\45\1\40"+
    "\1\5\1\43\2\5\1\47\1\17\1\15\1\24\1\22\1\5\1\44"+
    "\1\21\1\25\1\37\1\41\2\5\1\42\1\5\1\27\1\0\1\30"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\2\1\11\3\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\4\3\1\20\1\21\1\22\1\23"+
    "\1\24\2\0\1\25\3\0\1\26\30\3\1\27\1\0"+
    "\23\3\1\30\6\3\1\31\5\3\1\32\10\3\1\33"+
    "\1\34\2\3\1\35\1\36\1\37\4\3\1\40\1\3"+
    "\1\41\1\42\1\43\1\3\1\44\11\3\1\45\1\46"+
    "\4\3\1\47\1\50\10\3\1\51\1\3\1\52\3\3"+
    "\1\53\1\3\1\54\1\55\7\3\1\56\1\3\1\57"+
    "\1\60\1\61\1\62\2\3\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\55\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\55\0\55\0\55\0\55"+
    "\0\55\0\55\0\55\0\55\0\u0357\0\u0384\0\u03b1\0\u03de"+
    "\0\u040b\0\55\0\55\0\55\0\u0438\0\u0465\0\u0168\0\55"+
    "\0\u0492\0\u0195\0\u04bf\0\55\0\u04ec\0\u0519\0\u0546\0\u0573"+
    "\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db"+
    "\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843"+
    "\0\u0870\0\u089d\0\u08ca\0\u08f7\0\55\0\u0924\0\u0951\0\u097e"+
    "\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6"+
    "\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e"+
    "\0\u0c7b\0\264\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89"+
    "\0\55\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\264\0\u0e97"+
    "\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\264"+
    "\0\264\0\u0fff\0\u102c\0\264\0\264\0\264\0\u1059\0\u1086"+
    "\0\u10b3\0\u10e0\0\264\0\u110d\0\264\0\264\0\264\0\u113a"+
    "\0\264\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275"+
    "\0\u12a2\0\u12cf\0\264\0\264\0\u12fc\0\u1329\0\u1356\0\u1383"+
    "\0\264\0\264\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491"+
    "\0\u14be\0\u14eb\0\264\0\u1518\0\264\0\u1545\0\u1572\0\u159f"+
    "\0\264\0\u15cc\0\264\0\264\0\u15f9\0\u1626\0\u1653\0\u1680"+
    "\0\u16ad\0\u16da\0\u1707\0\264\0\u1734\0\264\0\264\0\264"+
    "\0\264\0\u1761\0\u178e\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\5\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\3\5\1\36"+
    "\1\5\1\37\1\40\1\5\1\41\1\5\1\42\1\43"+
    "\1\44\56\0\3\3\56\0\1\45\7\0\12\45\10\0"+
    "\11\45\1\0\1\45\10\0\2\5\6\0\12\5\10\0"+
    "\11\5\1\0\1\5\11\0\1\6\46\0\1\7\2\0"+
    "\52\7\11\0\1\46\43\0\12\47\1\50\1\51\41\47"+
    "\13\52\1\53\1\54\40\52\5\0\2\5\6\0\1\5"+
    "\1\55\10\5\10\0\11\5\1\0\1\5\10\0\2\5"+
    "\6\0\12\5\10\0\5\5\1\56\1\57\1\5\1\60"+
    "\1\0\1\5\10\0\2\5\6\0\3\5\1\61\6\5"+
    "\10\0\11\5\1\0\1\5\10\0\2\5\6\0\1\62"+
    "\11\5\10\0\2\5\1\63\6\5\1\0\1\5\10\0"+
    "\2\5\6\0\10\5\1\64\1\5\10\0\1\65\10\5"+
    "\1\0\1\5\10\0\2\5\6\0\1\5\1\66\10\5"+
    "\10\0\10\5\1\67\1\0\1\5\10\0\2\5\6\0"+
    "\7\5\1\70\2\5\10\0\11\5\1\0\1\5\10\0"+
    "\2\5\6\0\12\5\10\0\3\5\1\71\1\5\1\72"+
    "\3\5\1\0\1\5\10\0\2\5\6\0\12\5\10\0"+
    "\3\5\1\73\1\74\4\5\1\0\1\5\10\0\2\5"+
    "\6\0\1\75\11\5\10\0\4\5\1\76\4\5\1\0"+
    "\1\5\10\0\2\5\6\0\1\77\11\5\10\0\11\5"+
    "\1\0\1\5\10\0\2\5\6\0\1\5\1\100\10\5"+
    "\10\0\10\5\1\101\1\0\1\5\10\0\2\5\6\0"+
    "\1\5\1\102\1\5\1\103\3\5\1\104\2\5\10\0"+
    "\11\5\1\0\1\5\53\0\1\105\11\0\2\45\6\0"+
    "\12\45\10\0\11\45\1\0\1\45\3\0\11\46\1\106"+
    "\43\46\2\47\1\0\52\47\2\52\1\0\52\52\5\0"+
    "\2\5\6\0\2\5\1\107\7\5\10\0\11\5\1\0"+
    "\1\5\10\0\2\5\6\0\12\5\10\0\5\5\1\110"+
    "\3\5\1\0\1\5\10\0\2\5\6\0\10\5\1\111"+
    "\1\5\10\0\11\5\1\0\1\5\10\0\2\5\6\0"+
    "\12\5\10\0\4\5\1\112\4\5\1\0\1\5\10\0"+
    "\2\5\6\0\4\5\1\113\5\5\10\0\11\5\1\0"+
    "\1\5\10\0\2\5\6\0\12\5\10\0\1\114\10\5"+
    "\1\0\1\5\10\0\2\5\6\0\3\5\1\115\6\5"+
    "\10\0\11\5\1\0\1\5\10\0\2\5\6\0\1\5"+
    "\1\116\10\5\10\0\5\5\1\117\3\5\1\0\1\5"+
    "\10\0\2\5\6\0\12\5\10\0\7\5\1\120\1\5"+
    "\1\0\1\5\10\0\2\5\6\0\12\5\10\0\5\5"+
    "\1\121\3\5\1\0\1\5\10\0\2\5\6\0\1\5"+
    "\1\122\10\5\10\0\11\5\1\0\1\5\10\0\2\5"+
    "\6\0\2\5\1\123\7\5\10\0\11\5\1\0\1\5"+
    "\10\0\2\5\6\0\5\5\1\124\4\5\10\0\11\5"+
    "\1\0\1\5\10\0\2\5\6\0\12\5\10\0\1\125"+
    "\10\5\1\0\1\5\10\0\2\5\6\0\1\126\11\5"+
    "\10\0\11\5\1\0\1\5\10\0\2\5\6\0\4\5"+
    "\1\127\5\5\10\0\11\5\1\0\1\5\10\0\2\5"+
    "\6\0\12\5\10\0\4\5\1\130\4\5\1\0\1\5"+
    "\10\0\2\5\6\0\1\131\11\5\10\0\11\5\1\0"+
    "\1\5\10\0\2\5\6\0\10\5\1\132\1\5\10\0"+
    "\6\5\1\133\2\5\1\0\1\5\10\0\2\5\6\0"+
    "\12\5\10\0\10\5\1\134\1\0\1\5\10\0\2\5"+
    "\6\0\7\5\1\135\2\5\10\0\11\5\1\0\1\5"+
    "\10\0\2\5\6\0\4\5\1\136\5\5\10\0\11\5"+
    "\1\0\1\5\10\0\2\5\6\0\12\5\10\0\6\5"+
    "\1\137\2\5\1\0\1\5\10\0\2\5\6\0\7\5"+
    "\1\140\2\5\10\0\11\5\1\0\1\5\13\0\1\141"+
    "\51\0\2\5\6\0\3\5\1\142\6\5\10\0\11\5"+
    "\1\0\1\5\10\0\2\5\6\0\1\5\1\143\10\5"+
    "\10\0\11\5\1\0\1\5\10\0\2\5\6\0\3\5"+
    "\1\144\6\5\10\0\11\5\1\0\1\5\10\0\2\5"+
    "\6\0\1\5\1\145\10\5\10\0\11\5\1\0\1\5"+
    "\10\0\2\5\6\0\4\5\1\146\5\5\10\0\11\5"+
    "\1\0\1\5\10\0\2\5\6\0\2\5\1\147\7\5"+
    "\10\0\11\5\1\0\1\5\10\0\2\5\6\0\1\150"+
    "\11\5\10\0\11\5\1\0\1\5\10\0\2\5\6\0"+
    "\10\5\1\151\1\5\10\0\11\5\1\0\1\5\10\0"+
    "\2\5\6\0\12\5\10\0\1\152\10\5\1\0\1\5"+
    "\10\0\2\5\6\0\6\5\1\153\3\5\10\0\11\5"+
    "\1\0\1\5\10\0\2\5\6\0\1\5\1\154\10\5"+
    "\10\0\11\5\1\0\1\5\10\0\2\5\6\0\6\5"+
    "\1\155\3\5\10\0\11\5\1\0\1\5\10\0\2\5"+
    "\6\0\2\5\1\156\2\5\1\157\4\5\10\0\11\5"+
    "\1\0\1\5\10\0\2\5\6\0\3\5\1\160\6\5"+
    "\10\0\11\5\1\0\1\5\10\0\2\5\6\0\3\5"+
    "\1\161\6\5\10\0\11\5\1\0\1\5\10\0\2\5"+
    "\6\0\1\5\1\162\10\5\10\0\11\5\1\0\1\5"+
    "\10\0\2\5\6\0\5\5\1\163\4\5\10\0\11\5"+
    "\1\0\1\5\10\0\2\5\6\0\10\5\1\164\1\5"+
    "\10\0\11\5\1\0\1\5\10\0\2\5\6\0\10\5"+
    "\1\165\1\5\10\0\11\5\1\0\1\5\10\0\2\5"+
    "\6\0\7\5\1\166\2\5\10\0\11\5\1\0\1\5"+
    "\10\0\2\5\6\0\4\5\1\167\5\5\10\0\11\5"+
    "\1\0\1\5\10\0\2\5\6\0\1\5\1\170\10\5"+
    "\10\0\11\5\1\0\1\5\10\0\2\5\6\0\3\5"+
    "\1\171\6\5\10\0\11\5\1\0\1\5\10\0\2\5"+
    "\6\0\7\5\1\172\2\5\10\0\11\5\1\0\1\5"+
    "\10\0\2\5\6\0\12\5\10\0\10\5\1\173\1\0"+
    "\1\5\10\0\2\5\6\0\4\5\1\174\5\5\10\0"+
    "\11\5\1\0\1\5\10\0\2\5\6\0\12\5\10\0"+
    "\3\5\1\175\5\5\1\0\1\5\10\0\2\5\6\0"+
    "\12\5\10\0\5\5\1\176\3\5\1\0\1\5\10\0"+
    "\2\5\6\0\4\5\1\177\5\5\10\0\11\5\1\0"+
    "\1\5\10\0\2\5\6\0\1\5\1\200\10\5\10\0"+
    "\11\5\1\0\1\5\10\0\2\5\6\0\10\5\1\201"+
    "\1\5\10\0\11\5\1\0\1\5\10\0\2\5\6\0"+
    "\12\5\10\0\1\202\10\5\1\0\1\5\10\0\2\5"+
    "\6\0\6\5\1\203\3\5\10\0\11\5\1\0\1\5"+
    "\10\0\2\5\6\0\7\5\1\204\2\5\10\0\11\5"+
    "\1\0\1\5\10\0\2\5\6\0\2\5\1\205\7\5"+
    "\10\0\11\5\1\0\1\5\10\0\2\5\6\0\3\5"+
    "\1\206\6\5\10\0\11\5\1\0\1\5\10\0\2\5"+
    "\6\0\1\5\1\207\10\5\10\0\11\5\1\0\1\5"+
    "\10\0\2\5\6\0\7\5\1\210\2\5\10\0\11\5"+
    "\1\0\1\5\10\0\2\5\6\0\2\5\1\211\7\5"+
    "\10\0\11\5\1\0\1\5\10\0\2\5\6\0\12\5"+
    "\10\0\10\5\1\212\1\0\1\5\10\0\2\5\6\0"+
    "\3\5\1\213\6\5\10\0\11\5\1\0\1\5\10\0"+
    "\2\5\6\0\10\5\1\214\1\5\10\0\11\5\1\0"+
    "\1\5\10\0\2\5\6\0\12\5\10\0\11\5\1\0"+
    "\1\215\10\0\2\5\6\0\12\5\10\0\5\5\1\216"+
    "\3\5\1\0\1\5\10\0\2\5\6\0\5\5\1\217"+
    "\4\5\10\0\11\5\1\0\1\5\10\0\2\5\6\0"+
    "\12\5\10\0\1\5\1\220\7\5\1\0\1\5\10\0"+
    "\2\5\6\0\4\5\1\221\5\5\10\0\11\5\1\0"+
    "\1\5\10\0\2\5\6\0\10\5\1\222\1\5\10\0"+
    "\11\5\1\0\1\5\10\0\2\5\6\0\2\5\1\223"+
    "\7\5\10\0\11\5\1\0\1\5\10\0\2\5\6\0"+
    "\3\5\1\224\6\5\10\0\11\5\1\0\1\5\10\0"+
    "\2\5\6\0\2\5\1\225\7\5\10\0\11\5\1\0"+
    "\1\5\10\0\2\5\6\0\1\226\11\5\10\0\11\5"+
    "\1\0\1\5\10\0\2\5\6\0\1\227\11\5\10\0"+
    "\11\5\1\0\1\5\10\0\2\5\6\0\12\5\10\0"+
    "\4\5\1\230\4\5\1\0\1\5\10\0\2\5\6\0"+
    "\1\5\1\231\10\5\10\0\11\5\1\0\1\5\10\0"+
    "\2\5\6\0\10\5\1\232\1\5\10\0\11\5\1\0"+
    "\1\5\10\0\2\5\6\0\3\5\1\233\6\5\10\0"+
    "\11\5\1\0\1\5\10\0\2\5\6\0\1\5\1\234"+
    "\10\5\10\0\11\5\1\0\1\5\10\0\2\5\6\0"+
    "\3\5\1\235\6\5\10\0\11\5\1\0\1\5\10\0"+
    "\2\5\6\0\5\5\1\236\4\5\10\0\11\5\1\0"+
    "\1\5\10\0\2\5\6\0\10\5\1\237\1\5\10\0"+
    "\11\5\1\0\1\5\10\0\2\5\6\0\3\5\1\240"+
    "\6\5\10\0\11\5\1\0\1\5\10\0\2\5\6\0"+
    "\11\5\1\241\10\0\11\5\1\0\1\5\10\0\2\5"+
    "\6\0\3\5\1\242\6\5\10\0\11\5\1\0\1\5"+
    "\10\0\2\5\6\0\6\5\1\243\3\5\10\0\11\5"+
    "\1\0\1\5\10\0\2\5\6\0\12\5\10\0\3\5"+
    "\1\244\5\5\1\0\1\5\10\0\2\5\6\0\12\5"+
    "\10\0\3\5\1\245\5\5\1\0\1\5\10\0\2\5"+
    "\6\0\6\5\1\246\3\5\10\0\11\5\1\0\1\5"+
    "\10\0\2\5\6\0\7\5\1\247\2\5\10\0\11\5"+
    "\1\0\1\5\10\0\2\5\6\0\3\5\1\250\6\5"+
    "\10\0\11\5\1\0\1\5\10\0\2\5\6\0\1\251"+
    "\11\5\10\0\11\5\1\0\1\5\10\0\2\5\6\0"+
    "\1\252\11\5\10\0\11\5\1\0\1\5\10\0\2\5"+
    "\6\0\5\5\1\253\4\5\10\0\11\5\1\0\1\5"+
    "\10\0\2\5\6\0\3\5\1\254\6\5\10\0\11\5"+
    "\1\0\1\5\10\0\2\5\6\0\1\255\11\5\10\0"+
    "\11\5\1\0\1\5\10\0\2\5\6\0\12\5\10\0"+
    "\5\5\1\256\3\5\1\0\1\5\10\0\2\5\6\0"+
    "\10\5\1\257\1\5\10\0\11\5\1\0\1\5\10\0"+
    "\2\5\6\0\10\5\1\260\1\5\10\0\11\5\1\0"+
    "\1\5\10\0\2\5\6\0\3\5\1\261\6\5\10\0"+
    "\11\5\1\0\1\5\10\0\2\5\6\0\3\5\1\262"+
    "\6\5\10\0\11\5\1\0\1\5\10\0\2\5\6\0"+
    "\1\263\11\5\10\0\11\5\1\0\1\5\10\0\2\5"+
    "\6\0\10\5\1\264\1\5\10\0\11\5\1\0\1\5"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6075];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\13\1\10\11\5\1\3\11"+
    "\1\1\2\0\1\11\3\0\1\11\30\1\1\11\1\0"+
    "\32\1\1\11\123\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _IfDevLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _IfDevLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return STAR;
          }
        case 52: break;
        case 35: 
          { return ALIAS;
          }
        case 53: break;
        case 34: 
          { return AFTER;
          }
        case 54: break;
        case 12: 
          { return LEFT_BRACKET;
          }
        case 55: break;
        case 51: 
          { return SUBCOMPONENT;
          }
        case 56: break;
        case 33: 
          { return ARRAY;
          }
        case 57: break;
        case 25: 
          { return MULTILINE_COMMENT;
          }
        case 58: break;
        case 46: 
          { return NAMESPACE;
          }
        case 59: break;
        case 47: 
          { return PARAMETER;
          }
        case 60: break;
        case 39: 
          { return STATUS;
          }
        case 61: break;
        case 37: 
          { return FALSE;
          }
        case 62: break;
        case 10: 
          { return LEFT_PAREN;
          }
        case 63: break;
        case 14: 
          { return COMMA;
          }
        case 64: break;
        case 16: 
          { return DOT;
          }
        case 65: break;
        case 5: 
          { return COMMENT;
          }
        case 66: break;
        case 48: 
          { return PLACEMENT;
          }
        case 67: break;
        case 22: 
          { return STRING_UNARY_QUOTES;
          }
        case 68: break;
        case 45: 
          { return DISPLAY;
          }
        case 69: break;
        case 4: 
          { return NON_NEGATIVE_NUMBER;
          }
        case 70: break;
        case 19: 
          { return COLON;
          }
        case 71: break;
        case 6: 
          { return SLASH;
          }
        case 72: break;
        case 23: 
          { return DOTS;
          }
        case 73: break;
        case 24: 
          { return INT;
          }
        case 74: break;
        case 15: 
          { return EQ_SIGN;
          }
        case 75: break;
        case 50: 
          { return BASE_TYPE;
          }
        case 76: break;
        case 20: 
          { return ESCAPED_NAME;
          }
        case 77: break;
        case 8: 
          { return LEFT_BRACE;
          }
        case 78: break;
        case 42: 
          { return MESSAGE;
          }
        case 79: break;
        case 27: 
          { return TYPE_KEYWORD;
          }
        case 80: break;
        case 11: 
          { return RIGHT_PAREN;
          }
        case 81: break;
        case 44: 
          { return DYNAMIC;
          }
        case 82: break;
        case 31: 
          { return INFO;
          }
        case 83: break;
        case 26: 
          { return ENUM;
          }
        case 84: break;
        case 38: 
          { return FLOAT;
          }
        case 85: break;
        case 29: 
          { return UNIT_TOKEN;
          }
        case 86: break;
        case 18: 
          { return MINUS;
          }
        case 87: break;
        case 13: 
          { return RIGHT_BRACKET;
          }
        case 88: break;
        case 40: 
          { return STRUCT;
          }
        case 89: break;
        case 30: 
          { return UINT;
          }
        case 90: break;
        case 49: 
          { return COMPONENT;
          }
        case 91: break;
        case 21: 
          { return STRING;
          }
        case 92: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 93: break;
        case 28: 
          { return TRUE;
          }
        case 94: break;
        case 36: 
          { return EVENT;
          }
        case 95: break;
        case 17: 
          { return PLUS;
          }
        case 96: break;
        case 43: 
          { return COMMAND;
          }
        case 97: break;
        case 32: 
          { return BOOL;
          }
        case 98: break;
        case 3: 
          { return ELEMENT_NAME_TOKEN;
          }
        case 99: break;
        case 9: 
          { return RIGHT_BRACE;
          }
        case 100: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 101: break;
        case 41: 
          { return BEFORE;
          }
        case 102: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
